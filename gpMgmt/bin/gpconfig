#!/usr/bin/env python
#
# Copyright (c) Greenplum Inc 2009. All Rights Reserved.

import os
import sys
import re

try:
    from gppylib.gpparseopts import OptParser, OptChecker
    from gppylib.gparray import GpArray
    from gppylib.gphostcache import *
    from gppylib.gplog import *
    from gppylib.commands.unix import *
    from gppylib.commands.gp import *
    from gppylib.db import dbconn
    from gppylib.userinput import *
    from pygresql.pg import DatabaseError
    from gpconfig_modules.segment_guc import SegmentGuc
    from gpconfig_modules.database_segment_guc import DatabaseSegmentGuc
    from gpconfig_modules.file_segment_guc import FileSegmentGuc
    from gpconfig_modules.guc_collection import GucCollection
    from gppylib.gpresgroup import GpResGroup
except ImportError as err:
    sys.exit('Cannot import modules.  Please check that you have sourced '
             'greenplum_path.sh.  Detail: ' + str(err))

EXECNAME = os.path.split(__file__)[-1]

PROHIBITED_GUCS = set(["port", "listen_addresses"])
SAMEVALUE_GUCS = set(["gp_default_storage_options"])
LOGGER = get_default_logger()
setup_tool_logging(EXECNAME, getLocalHostname(), getUserName())


def parseargs():
    parser = OptParser(option_class=OptChecker)
    parser.remove_option('-h')
    parser.add_option('-h', '-?', '--help', action='help')
    parser.add_option('--verbose', action='store_true')
    parser.add_option('--skipvalidation', action='store_true')
    parser.add_option('--masteronly', action='store_true')
    parser.add_option('--debug', action='store_true')
    parser.add_option('-c', '--change', type='string')
    parser.add_option('-r', '--remove', type='string')
    parser.add_option('-s', '--show', type='string')
    parser.add_option('-v', '--value', type='string')
    parser.add_option('-m', '--mastervalue', type='string')
    parser.add_option('-l', '--list', action='store_true')
    parser.add_option('-P', '--primaryvalue', type='string')
    parser.add_option('-M', '--mirrorvalue', type='string')
    parser.add_option('-f', '--file', action='store_true')
    parser.add_option('--file-compare', dest='file_compare', action='store_true')

    (options, _) = parser.parse_args()

    options.entry = None
    validate_four_verbs(options)
    validate_mutual_options(options)
    return options


def validate_four_verbs(options):
    if options.change:
        options.entry = options.change
    elif options.remove:
        options.entry = options.remove
        options.remove = True
    elif not options.list and not options.show:
        log_and_raise("No action specified.  See the --help info.")


def validate_mutual_options(options):
    user = os.getenv('USER')
    if user is None or user == ' ':
        log_and_raise("USER environment variable must be set.")

    if options.file and not options.show:
        log_and_raise("'--file' option must accompany '--show' option")
    if options.file and options.file_compare and options.show:
        log_and_raise("'--file' option and '--file-compare' option cannot be used together")
    if options.file and "MASTER_DATA_DIRECTORY" not in os.environ:
        log_and_raise("--file option requires that MASTER_DATA_DIRECTORY be set")
    if options.remove and (options.value or options.primaryvalue or options.mirrorvalue or options.mastervalue):
        log_and_raise("remove action does not take a value, primary value, mirror value or master value parameter")
    if options.change and options.remove:
        log_and_raise("Multiple actions specified.  See the --help info.")
    if options.change and (not options.value and (not options.mirrorvalue and not options.primaryvalue)):
        log_and_raise("change requested but value not specified")
    if options.change and options.mastervalue and options.masteronly:
        log_and_raise("when changing a parameter on the master only specify the --value not --mastervalue")
    if options.change and (options.value and (options.primaryvalue or options.mirrorvalue)):
        log_and_raise("cannot use both value option and primaryvalue/mirrorvalue option")
    if (options.masteronly or options.mastervalue) and options.entry in SAMEVALUE_GUCS:
        log_and_raise("%s value cannot be different on master and segments" % options.entry)
    if options.value and (not options.mastervalue):
        options.mastervalue = options.value


class ToolkitQuery:
    def __init__(self, name):
        self.query = "select * from gp_toolkit.gp_param_setting('%s')" % name


class GucQuery:
    def __init__(self, name=None):
        self.query = 'SELECT name, setting, unit, short_desc, context, vartype, min_val, max_val FROM pg_settings'
        if name:
            self.query = self.query + " where name = '" + name + "'"


class Guc:
    def __init__(self, row):
        self.name = row[0]
        self.setting = row[1]
        self.unit = row[2]
        self.short_desc = row[3]
        self.context = row[4]
        self.vartype = row[5]
        self.min_val = row[6]
        self.max_val = row[7]

    def validate(self, newval, newmasterval, options):
        # todo add code here...
        # be careful 128KB in postgresql.conf is translated into 32KB units

        if self.name == "max_connections" and (not options.masteronly):
            try:
                seg = int(newval)
                master = int(newmasterval)
                if seg <= master:
                    return "the value of max_connections must be greater on the segments than on the master"
            except:
                return "invalid value for max_connections"

        elif self.name == "gp_resource_manager":
            if newval == "group":
                LOGGER.warn("Managing queries with resource groups is an "
                            "experimental feature. A work-in-progress version is "
                            "enabled.")
                msg = GpResGroup().validate()
                if msg is not None:
                    return msg
            elif newval != "queue":
                return "the value of gp_resource_manager must be 'group' or 'queue'"

        elif self.name == 'unix_socket_permissions':
            if newval[0] != '0':
                LOGGER.warn(
                    'Permission not entered in octal format.It was interpreted as Decimal.  %s in Octal = 0%s' % (
                        newval, int(newval, 8)))
        elif self.name == "gp_default_storage_options":
            newval = newval.strip()
            # Value must be enclosed in single quotes else postgres
            # will fail to start due to syntax errors in config file.
            if (not newval.startswith("'")) or (not newval.endswith("'")):
                return "Value must be enclosed in single quotes: '...'"
            newval = newval.strip("'")
            # Ensure that newval is of the form 'name=value,...'.
            for pair in newval.split(","):
                try:
                    name, value = pair.strip().split("=")
                    name = name.strip()
                    value = value.strip()
                    if re.match("^[a-z][a-z]*$", name) is None:
                        return "Invalid option name \"%s\"" % name
                    if re.match("^[a-z0-9_][a-z0-9_]*$", value) is None:
                        return ("Invalid value \"%s\" for option %s" %
                                (value, name))
                except ValueError:
                    return "Valid values are of the form 'name=value,...'."
        return "ok"

    def print_info(self):
        print "[name: %s] [unit: %s] [context: %s] [vartype: %s] [min_val: %s] [max_val: %s]" % (
            self.name, self.unit, self.context, self.vartype, self.min_val, self.max_val)


def confirm_user_wants_to_continue():
    if not ask_yesno('', "Are you sure you want to ignore unreachable hosts?", 'N'):
        LOGGER.info("User Aborted. Exiting...")
        raise Exception("User Aborted. Exiting.")


def print_verbosely(options, normalized_hostname, hostname, directory):
    if options.verbose:
        msg = "normalized_host=%s host=%s dir=%s" % (normalized_hostname, hostname, directory)
        LOGGER.info(msg)


def do_list(skipvalidation):
    try:
        dburl = dbconn.DbURL()
        conn = dbconn.connect(dburl, True)
        rows = dbconn.execSQL(conn, GucQuery().query)

        for row in rows:
            guc = Guc(row)
            if skipvalidation or (guc.name not in PROHIBITED_GUCS):
                guc.print_info()

        conn.close()

    except DatabaseError as _:
        LOGGER.error('Failed to connect to database, this script can only be run when the database is up.')


def get_gucs_from_database(gucname):
    try:
        dburl = dbconn.DbURL()
        conn = dbconn.connect(dburl, False)
        query = ToolkitQuery(gucname).query
        cursor = dbconn.execSQL(conn, query)
        # we assume that all roles are primary due to the query.
        gucs = [DatabaseSegmentGuc(row) for row in cursor]
        conn.close()
        return gucs

    except DatabaseError as ex:

        if re.search("unrecognized configuration parameter", ex.__str__()):
            LOGGER.error('Failed to retrieve GUC information, guc does not exist: ' + gucname)
        elif re.search("could not connect to server", ex.__str__()):
            LOGGER.error('Failed to retrieve GUC information, the database is not accessible')
        else:
            LOGGER.error('Failed to retrieve GUC information: ' + ex.__str__())


def _print_gucs(gucname, gucs, options):
    collection = GucCollection()
    collection.update_list(gucs)

    if _show_all_segment_values_always(options):
        print "GUC                 : %s" % gucname
        for guc in collection.values():
            print "Context: %5s Value: %s" % (guc.context, guc.value)
    else:
        if collection.are_segments_consistent():
            print "Values on all segments are consistent"
            print "GUC          : %s" % gucname
            print collection.report()
        else:
            print "WARNING: GUCS ARE OUT OF SYNC: "
            print collection.report()


def _show_all_segment_values_always(options):
    return options.show == "port"


def do_add_config_script(pool, hostname, segs, value, options):
    directory_string = None

    for seg in segs:

        if directory_string:
            directory_string = directory_string + "\n" + seg.datadir
        else:
            directory_string = seg.datadir

        print_verbosely(options, hostname, seg.hostname, seg.datadir)

    cmd = GpAddConfigScript(hostname, directory_string, options.entry, value, options.remove, ctxt=REMOTE,
                            remoteHost=hostname)
    pool.addCommand(cmd)


def do_change(options):
    if options.debug:
        enable_verbose_logging()

    try:
        gp_array = GpArray.initFromCatalog(dbconn.DbURL(), utility=True)

        if not options.skipvalidation:
            validate_options(options)

    except DatabaseError as ex:
        LOGGER.error(ex.__str__())
        msg = 'Failed to connect to database, exiting without action. ' \
              'This script can only be run when the database is up.'
        LOGGER.error(msg)
        raise Exception(msg)

    pool = WorkerPool()

    host_cache = GpHostCache(gp_array, pool)
    failed_pings = host_cache.ping_hosts(pool)

    if failed_pings:
        for i in failed_pings:
            LOGGER.warning('unreachable host: ' + i.hostname)
        confirm_user_wants_to_continue()

    failure = False
    try:
        # do the segments
        if not options.masteronly:
            for host in host_cache.get_hosts():

                if options.primaryvalue:
                    do_add_config_script(pool, host.hostname, [seg for seg in host.dbs if seg.isSegmentPrimary()],
                                         options.primaryvalue, options)

                if options.mirrorvalue:
                    do_add_config_script(pool, host.hostname, [seg for seg in host.dbs if seg.isSegmentMirror()],
                                         options.mirrorvalue, options)

                if not options.primaryvalue and not options.mirrorvalue:
                    do_add_config_script(pool, host.hostname, host.dbs, options.value, options)

        # do the master
        if options.mastervalue or options.remove:
            print_verbosely(options, gp_array.master.hostname, gp_array.master.hostname, gp_array.master.datadir)
            cmd = GpAddConfigScript("master", gp_array.master.datadir, options.entry, options.mastervalue,
                                    options.remove, ctxt=REMOTE, remoteHost=gp_array.master.hostname)
            pool.addCommand(cmd)

            # do the standby master
            if gp_array.standbyMaster:
                print_verbosely(options, gp_array.standbyMaster.hostname, gp_array.standbyMaster.hostname,
                                gp_array.standbyMaster.datadir)
                cmd = GpAddConfigScript("standbymaster", gp_array.standbyMaster.datadir, options.entry,
                                        options.mastervalue, options.remove, ctxt=REMOTE,
                                        remoteHost=gp_array.standbyMaster.hostname)
                pool.addCommand(cmd)

        pool.join()
        items = pool.getCompletedItems()
        for i in items:
            if not i.was_successful():
                LOGGER.error('failed updating the postgresql.conf files on host: ' + i.remoteHost)
                failure = True

        pool.check_results()
    except Exception as err:
        failure = True
        LOGGER.error('errors in job:')
        LOGGER.error(err.__str__())
        LOGGER.error('exiting early')

    pool.haltWork()
    pool.joinWorkers()

    if failure:
        LOGGER.error('finished with errors')
    else:
        LOGGER.info("completed successfully")


def validate_options(options):
    conn = dbconn.connect(dbconn.DbURL(), True)
    guc = get_normal_guc(conn, options)
    if not guc:
        # Hidden gucs: a guc is considered hidden if both:
        #     1. It is not present with normal gucs in pg_settings
        #     2. It has a valid return from SHOW <guc_name>;
        try:
            dbconn.execSQLForSingleton(conn, "SHOW %s" % options.entry)
        except DatabaseError:
            msg = "not a valid GUC: " + options.entry
            LOGGER.fatal(msg)
            raise Exception(msg)

        msg = "GUC Validation Failed: %s cannot be changed under normal conditions. " \
              "Please refer to gpconfig documentation." % options.entry
        LOGGER.fatal(msg)
        raise Exception(msg)
    conn.close()
    if options.entry in PROHIBITED_GUCS:
        msg = "The parameter '%s' is not modifiable with this tool" % options.entry
        LOGGER.fatal(msg)
        raise Exception(msg)
    if options.value:
        msg = guc.validate(options.value, options.mastervalue, options)
        if msg != "ok":
            msg = "new GUC value failed validation: " + msg
            LOGGER.fatal(msg)
            raise Exception(msg)


def get_normal_guc(conn, options):
    cursor = dbconn.execSQL(conn, GucQuery(options.entry).query)
    rows = cursor.fetchall()
    guc = None
    if len(rows) > 1:
        msg = "more than 1 GUC matches: " + options.entry
        LOGGER.fatal(msg)
        raise Exception(msg)
    elif len(rows) == 1:
        guc = Guc(rows[0])
    return guc


def log_and_raise(err_str):
    LOGGER.error(err_str)
    raise Exception(err_str)


def get_gucs_from_files(gucname):
    hosts, pool = _get_hosts()
    commands = []
    for host in hosts:
        for seg in host.dbs:
            command = GpReadConfig("readConfig", host, seg, gucname)
            commands.append(command)
            pool.addCommand(command)

    pool.join()

    gucs = []
    for cmd in pool.getCompletedItems():
        value = cmd.get_guc_value()
        gucs.append(
            FileSegmentGuc([cmd.get_seg_content_id(), gucname, value, cmd.get_seg_dbid()]))

    pool.check_results()
    pool.haltWork()
    pool.joinWorkers()
    return gucs


def _get_hosts():
    dburl = dbconn.DbURL()
    gp_array = GpArray.initFromCatalog(dburl, utility=True)
    pool = WorkerPool()
    host_cache = GpHostCache(gp_array, pool, withMasters=True)
    failed_pings = host_cache.ping_hosts(pool)
    if failed_pings:
        for i in failed_pings:
            LOGGER.warning('unreachable host: ' + i.hostname)
        confirm_user_wants_to_continue()  # todo test me
    hosts = host_cache.get_hosts()
    return hosts, pool


def do_show(options):
    if options.skipvalidation:
        log_and_raise('--skipvalidation can not be combined with --show')
        return

    gucname = options.show
    gucs = []

    if options.file:
        gucs.extend(get_gucs_from_files(gucname))
    elif options.file_compare:
        gucs.extend(get_gucs_from_database(gucname))
        gucs.extend(get_gucs_from_files(gucname))
    else:
        gucs.extend(get_gucs_from_database(gucname))

    _print_gucs(gucname, gucs, options)


def do_main():
    options = parseargs()
    if options.list:
        do_list(options.skipvalidation)

    elif options.show:
        do_show(options)

    elif options.remove or options.change:
        do_change(options)


# --------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------
if __name__ == '__main__':
    """
    Avoid stack trace; just print exception message and return error code
    """
    try:
        do_main()
    except Exception as err:
        print err.message
        sys.exit(1)
