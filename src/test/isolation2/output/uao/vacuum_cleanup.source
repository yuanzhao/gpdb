-- @Description Test that when there is a parallel vacuum going on in drop phase, the age of
-- the AO/AOCS table gets reduced correctly.

1: create table ao_@orientation@_vacuum_cleanup1(a int, b int) with(appendonly=true, orientation=@orientation@);
CREATE
1: insert into ao_@orientation@_vacuum_cleanup1 select 1, i from generate_series(1, 100) i;
INSERT 100
1: update ao_@orientation@_vacuum_cleanup1 set b = b + 1;
UPDATE 100

-- The age of the table is 1 after the following statement
2: create table ao_@orientation@_vacuum_cleanup2(a int, b int) with(appendonly=true, orientation=@orientation@);
CREATE
-- The age of the table is 2 after the following statement
2: insert into ao_@orientation@_vacuum_cleanup2 select 1, i from generate_series(1, 100) i;
INSERT 100
-- The age of the table is 3 after the following statement
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
UPDATE 100


1: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 2;
20170505:11:00:18:092363 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 2
20170505:11:00:18:092363 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Injecting fault on content=0:dbid=2:mode=s:status=u
20170505:11:00:18:092363 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-DONE


2&: vacuum ao_@orientation@_vacuum_cleanup1;  <waiting ...>

1: select wait_for_trigger_fault('vacuum_relation_open_relation_during_drop_phase', 2);
wait_for_trigger_fault
----------------------
t                     
(1 row)

1: set vacuum_freeze_min_age = 0;
SET
-- Check the age of the table just before vacuum
1: select age(relfrozenxid) from gp_dist_random('pg_class') where relname = 'ao_@orientation@_vacuum_cleanup2' and gp_segment_id = 0;
age
---
5  
(1 row)
1: vacuum ao_@orientation@_vacuum_cleanup2;
VACUUM

-- We expect the age to be 3. This is because all the xids before the first
-- vacuum will be frozen. The relfrozenxid will be the xid of the last
-- transaction before the vacuum (in this case it is the update statement)
1: select age(relfrozenxid) from gp_dist_random('pg_class') where relname = 'ao_@orientation@_vacuum_cleanup2' and gp_segment_id = 0;
age
---
3  
(1 row)

1: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y reset -s 2;
20170505:11:00:19:092390 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y reset -s 2
20170505:11:00:19:092390 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Injecting fault on content=0:dbid=2:mode=s:status=u
20170505:11:00:19:092390 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-DONE

2<:  <... completed>
VACUUM

-- Check that drop phase is skipped, but still the cleanup phase is performed
-- when there are concurrent serializable transactions

1: create table ao_@orientation@_vacuum_cleanup3(a int, b int) with(appendonly=true, orientation=@orientation@);
CREATE
1: insert into ao_@orientation@_vacuum_cleanup3 select i, i from generate_series(1, 100) i;
INSERT 100
1: delete from ao_@orientation@_vacuum_cleanup3;
DELETE 100

-- Check the age of the table before vacuum to make sure that clean phase gets
-- performed
1: select age(relfrozenxid) from gp_dist_random('pg_class') where relname = 'ao_@orientation@_vacuum_cleanup3' and gp_segment_id = 0;
age
---
3  
(1 row)
1: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 1;
20170509:15:52:16:071163 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 1
20170509:15:52:16:071163 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20170509:15:52:16:071163 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-DONE

1&: vacuum ao_@orientation@_vacuum_cleanup3;  <waiting ...>

-- Wait till compaction phase is completed and only then start the serializable
-- transaction to ensure that only drop phase is skipped
2: select wait_for_trigger_fault('vacuum_relation_open_relation_during_drop_phase', 1);
wait_for_trigger_fault
----------------------
t                     
(1 row)
2: begin isolation level serializable;
BEGIN
2: select 123;
?column?
--------
123     
(1 row)
2: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y reset -s 1;
20170509:15:52:17:071190 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y reset -s 1
20170509:15:52:17:071190 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20170509:15:52:17:071190 gpfaultinjector:subraa4-mac:abhijits-[INFO]:-DONE


1<:  <... completed>
VACUUM
1: select age(relfrozenxid) from gp_dist_random('pg_class') where relname = 'ao_@orientation@_vacuum_cleanup3' and gp_segment_id = 0;
age
---
1  
(1 row)

-- Validate that the drop phase was skipped. segfile 1 should be in state 2
-- (AWAITING_DROP)
1: SELECT gp_ao_or_aocs_seg_name('ao_@orientation@_vacuum_cleanup3') from gp_dist_random('gp_id');
gp_ao_or_aocs_seg_name
----------------------
(1,37,1,3,2)          
(2,0,1,3,1)           
(1,31,1,3,2)          
(2,0,1,3,1)           
(1,32,1,3,2)          
(2,0,1,3,1)           
(6 rows)

2: commit;
COMMIT
