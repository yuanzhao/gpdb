CREATE TABLE my_tt_agg_small (
    symbol character(16),
    event_ts bigint,
    trade_price numeric,
    trade_volume bigint
) DISTRIBUTED BY (symbol);
CREATE TABLE my_tq_agg_small (
    ets bigint,
    sym character varying(16),
    bid_price numeric,
    ask_price numeric,
    end_ts bigint
) DISTRIBUTED BY (ets);
COPY my_tt_agg_small (symbol, event_ts, trade_price, trade_volume) FROM stdin;
COPY my_tq_agg_small (ets, sym, bid_price, ask_price, end_ts) FROM stdin;
CREATE INDEX my_tq_agg_small_ets_end_ts_ix ON my_tq_agg_small USING btree (ets, end_ts);
analyze my_tq_agg_small;
analyze my_tt_agg_small;
set optimizer_enable_indexjoin=on;
set optimizer_nestloop_factor = 1.0;
-- force_explain
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..878.21 rows=413 width=16)
   Merge Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
   ->  GroupAggregate  (cost=0.00..878.19 rows=138 width=16)
         Group By: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
         ->  Sort  (cost=0.00..878.19 rows=138 width=16)
               Sort Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..878.10 rows=138 width=16)
                     Hash Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
                     ->  Result  (cost=0.00..878.09 rows=138 width=16)
                           ->  HashAggregate  (cost=0.00..878.09 rows=138 width=16)
                                 Group By: my_tt_agg_small.event_ts / 100000 / 5 * 5
                                 ->  Result  (cost=0.00..866.15 rows=94594 width=8)
                                       ->  Hash Join  (cost=0.00..865.39 rows=94594 width=8)
                                             Hash Cond: my_tq_agg_small.sym::bpchar = my_tt_agg_small.symbol
                                             Join Filter: my_tt_agg_small.event_ts >= my_tq_agg_small.ets AND my_tt_agg_small.event_ts < my_tq_agg_small.end_ts
                                             ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.10 rows=676 width=20)
                                                   Hash Key: my_tq_agg_small.sym::bpchar
                                                   ->  Table Scan on my_tq_agg_small  (cost=0.00..431.02 rows=676 width=20)
                                             ->  Hash  (cost=431.01..431.01 rows=140 width=25)
                                                   ->  Table Scan on my_tt_agg_small  (cost=0.00..431.01 rows=140 width=25)
 Settings:  optimizer=on; optimizer_nestloop_factor=1
 Optimizer status: PQO version 2.32.0
(22 rows)

  
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

set optimizer_enable_hashjoin = off;
set enable_hashjoin=off;
set enable_seqscan=off;
set enable_mergejoin=off;
set enable_nestloop=on;
set enable_indexscan=on;
-- start_ignore
-- Known_opt_diff: OPT-929
-- end_ignore
-- force_explain
set optimizer_segments = 2;
set optimizer_nestloop_factor = 1.0;
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1396.76 rows=413 width=16)
   Merge Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
   ->  GroupAggregate  (cost=0.00..1396.73 rows=138 width=16)
         Group By: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
         ->  Sort  (cost=0.00..1396.72 rows=138 width=16)
               Sort Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..1396.58 rows=138 width=16)
                     Hash Key: (my_tt_agg_small.event_ts / 100000 / 5 * 5)
                     ->  Result  (cost=0.00..1396.57 rows=138 width=16)
                           ->  HashAggregate  (cost=0.00..1396.57 rows=138 width=16)
                                 Group By: my_tt_agg_small.event_ts / 100000 / 5 * 5
                                 ->  Result  (cost=0.00..1378.65 rows=94594 width=8)
                                       ->  Nested Loop  (cost=0.00..1377.51 rows=94594 width=8)
                                             Join Filter: my_tq_agg_small.sym::bpchar = my_tt_agg_small.symbol AND my_tt_agg_small.event_ts >= my_tq_agg_small.ets AND my_tt_agg_small.event_ts < my_tq_agg_small.end_ts
                                             ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.29 rows=280 width=25)
                                                   ->  Table Scan on my_tt_agg_small  (cost=0.00..431.01 rows=140 width=25)
                                             ->  Table Scan on my_tq_agg_small  (cost=0.00..431.04 rows=676 width=20)
 Settings:  enable_hashjoin=off; enable_indexscan=on; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; optimizer=on; optimizer_nestloop_factor=1; optimizer_segments=2
 Optimizer status: PQO version 2.32.0
(19 rows)

reset optimizer_segments;
reset optimizer_nestloop_factor;
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

set optimizer_enable_hashjoin = on;
