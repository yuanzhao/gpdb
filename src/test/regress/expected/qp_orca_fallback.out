-- Test the optimizer_enable_dml_constraints GUC, which forces GPORCA to fall back when there
-- are NULL or CHECK constraints on a table.
set optimizer_trace_fallback = on;
DROP TABLE IF EXISTS constr_tab;
NOTICE:  table "constr_tab" does not exist, skipping
CREATE TABLE constr_tab ( a int check (a>0) , b int, c int, d int, CHECK (a+b>5)) DISTRIBUTED BY (a);
set optimizer_enable_dml_constraints = off;
explain insert into constr_tab values (1,2,3);
                   QUERY PLAN                   
------------------------------------------------
 Insert (slice0; segments: 1)  (rows=1 width=0)
   ->  Result  (cost=0.00..0.01 rows=1 width=0)
 Optimizer status: legacy query optimizer
(3 rows)

set optimizer_enable_dml_constraints=on;
explain insert into constr_tab values (1,2,3);
                   QUERY PLAN                   
------------------------------------------------
 Insert (slice0; segments: 1)  (rows=1 width=0)
   ->  Result  (cost=0.00..0.01 rows=1 width=0)
 Optimizer status: legacy query optimizer
(3 rows)

-- The remaining tests require a row in the table.
INSERT INTO constr_tab VALUES(1,5,3,4);
set optimizer_enable_dml_constraints=off;
explain update constr_tab set a = 10;
ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
explain update constr_tab set b = 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Update (slice0; segments: 3)  (rows=1 width=22)
   ->  Seq Scan on constr_tab  (cost=0.00..1.01 rows=1 width=22)
 Optimizer status: legacy query optimizer
(3 rows)

set optimizer_enable_dml_constraints=on;
explain update constr_tab set b = 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Update (slice0; segments: 3)  (rows=1 width=22)
   ->  Seq Scan on constr_tab  (cost=0.00..1.01 rows=1 width=22)
 Optimizer status: legacy query optimizer
(3 rows)

-- Same, with NOT NULL constraint.
DROP TABLE IF EXISTS constr_tab;
CREATE TABLE constr_tab ( a int NOT NULL, b int, c int, d int, CHECK (a+b>5)) DISTRIBUTED BY (a);
INSERT INTO constr_tab VALUES(1,5,3,4);
set optimizer_enable_dml_constraints=off;
explain update constr_tab set a = 10;
ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
DROP TABLE IF EXISTS constr_tab;
CREATE TABLE constr_tab ( a int NOT NULL, b int NOT NULL, c int NOT NULL, d int NOT NULL) DISTRIBUTED BY (a,b);
INSERT INTO constr_tab VALUES(1,5,3,4);
INSERT INTO constr_tab VALUES(1,5,3,4);
set optimizer_enable_dml_constraints=off;
explain update constr_tab set b = 10;
ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
DROP TABLE IF EXISTS constr_tab;
CREATE TABLE constr_tab ( a int, b int, c int, d int) DISTRIBUTED BY (a);
INSERT INTO constr_tab VALUES(1,5,3,4);
INSERT INTO constr_tab VALUES(1,5,3,4);
set optimizer_enable_dml_constraints=off;
explain update constr_tab set a = 10;
ERROR:  Cannot parallelize an UPDATE statement that updates the distribution columns
